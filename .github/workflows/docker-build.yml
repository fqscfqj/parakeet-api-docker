name: 🐳 Docker Build & Push

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
    paths:
      - 'Dockerfile*'
      - 'app.py'
      - 'requirements.txt'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'Dockerfile*'
      - 'app.py'
      - 'requirements.txt'
      - '.github/workflows/docker-build.yml'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      push_image:
        description: '是否推送镜像到registry'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: fqscfqj/parakeet-api-docker

jobs:
  build:
    name: 🔨 Build Slim Image
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🧹 Free up disk space
        run: |
          echo "=== 构建前磁盘清理 ==="
          df -h
          echo ""
          
          # 删除不必要的预安装软件和数据
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/lib/jvm
          sudo rm -rf /usr/share/swift
          sudo rm -rf /usr/local/julia*
          sudo rm -rf /usr/share/kotlinc
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/share/vim/vim*/doc/*
          
          # 清理 apt 缓存
          sudo apt-get autoremove -y >/dev/null 2>&1
          sudo apt-get autoclean -y >/dev/null 2>&1
          sudo apt-get clean -y >/dev/null 2>&1
          
          # 清理Docker缓存
          docker system prune -a -f --volumes >/dev/null 2>&1 || true
          
          echo "=== 清理后磁盘使用情况 ==="
          df -h
          echo ""

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: 🔐 Log in to Container Registry
        if: github.event_name != 'pull_request' && (github.event.inputs.push_image != false)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=commit-{{sha}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Parakeet ASR API (Slim)
            org.opencontainers.image.description=NeMo Parakeet ASR API Docker image - Slim version with optimized size and performance
            org.opencontainers.image.vendor=fqscfqj

      - name: 🔨 Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.slim
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_image != false) }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: 🧹 Cleanup after build
        if: always()
        run: |
          echo "=== 构建后磁盘使用情况 ==="
          df -h
          echo ""
          
          # 清理构建缓存
          docker builder prune -a -f >/dev/null 2>&1 || true
          docker system prune -a -f --volumes >/dev/null 2>&1 || true
          
          echo "=== 清理后磁盘使用情况 ==="
          df -h

      - name: 📋 Output image info
        if: github.event_name != 'pull_request' && (github.event.inputs.push_image != false)
        run: |
          echo "## 🐳 Parakeet ASR API Docker镜像构建完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**镜像版本:** Slim (轻量优化版)" >> $GITHUB_STEP_SUMMARY
          echo "**Dockerfile:** Dockerfile.slim" >> $GITHUB_STEP_SUMMARY
          echo "**支持平台:** linux/amd64" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**标签信息:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**使用方法:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 5092:5092 -v ./models:/app/models:ro ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: 🔍 Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: always() && github.event_name != 'pull_request' && needs.build.result == 'success'
    
    permissions:
      contents: read
      packages: read
      security-events: write
    
    steps:
      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: 📤 Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-slim'

  update-description:
    name: 📝 Update Package Description
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build.result == 'success'
    
    permissions:
      packages: write
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry  
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Update package description
        run: |
          echo "更新Slim版镜像描述..."
          docker buildx imagetools create \
            --annotation "index:org.opencontainers.image.description=🎙️ NeMo Parakeet ASR API - 高性能语音识别服务，支持长音频分片处理、GPU加速和多种输出格式。Slim version with optimized size and performance." \
            --annotation "index:org.opencontainers.image.documentation=https://github.com/fqscfqj/parakeet-api-docker" \
            --annotation "index:org.opencontainers.image.source=https://github.com/fqscfqj/parakeet-api-docker" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          echo "✅ 镜像描述更新完成"

  test-image:
    name: 🧪 Test Image
    runs-on: ubuntu-latest
    needs: [build]
    if: always() && github.event_name != 'pull_request' && needs.build.result == 'success'
    
    steps:
      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧪 Test image startup
        run: |
          # 设置镜像名称
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          
          echo "测试镜像: $IMAGE_TAG"
          
          # 创建临时目录
          mkdir -p ./test_models ./test_uploads
          
          # 启动容器进行基础测试
          docker run -d \
            --name test-container \
            -p 5092:5092 \
            -v ./test_models:/app/models:ro \
            -v ./test_uploads:/app/temp_uploads \
            -e ENABLE_LAZY_LOAD=true \
            -e IDLE_TIMEOUT_MINUTES=1 \
            $IMAGE_TAG
          
          # 等待容器启动
          echo "等待容器启动..."
          sleep 30
          
          # 检查容器状态
          if ! docker ps | grep test-container; then
            echo "❌ 容器启动失败"
            docker logs test-container
            exit 1
          fi
          
          # 测试健康检查端点
          echo "测试健康检查端点..."
          if curl -f http://localhost:5092/health/simple; then
            echo "✅ 健康检查端点响应正常"
          else
            echo "❌ 健康检查端点响应异常"
            docker logs test-container
            exit 1
          fi
          
          # 清理
          docker stop test-container || true
          docker rm test-container || true
          
          echo "✅ 镜像测试通过"

  notify-completion:
    name: 🎉 Notify Completion
    runs-on: ubuntu-latest
    needs: [build, security-scan, test-image]
    if: always() && github.event_name != 'pull_request'
    
    steps:
      - name: 📊 Generate summary
        run: |
          echo "## 🐳 Parakeet ASR API Docker镜像构建完成" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**构建结果:**" >> $GITHUB_STEP_SUMMARY
          
          # 构建结果
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "- ✅ Slim版构建: 成功" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build.result }}" = "skipped" ]; then
            echo "- ⏭️ Slim版构建: 跳过" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Slim版构建: 失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 安全扫描结果
          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "- ✅ 安全扫描: 通过" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.security-scan.result }}" = "skipped" ]; then
            echo "- ⏭️ 安全扫描: 跳过" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ 安全扫描: 失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 镜像测试结果
          if [ "${{ needs.test-image.result }}" = "success" ]; then
            echo "- ✅ 镜像测试: 通过" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.test-image.result }}" = "skipped" ]; then
            echo "- ⏭️ 镜像测试: 跳过" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ 镜像测试: 失败" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**可用镜像:**" >> $GITHUB_STEP_SUMMARY
          
          # 根据构建结果显示可用镜像
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "- Slim版: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**使用方法:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build.result }}" = "success" ]; then
            echo "# Parakeet ASR API (Slim优化版)" >> $GITHUB_STEP_SUMMARY
            echo "docker run -p 5092:5092 -v ./models:/app/models:ro ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          fi
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**✨ Slim版特性:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 镜像大小优化 50-60%" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ 启动速度提升 30-40%" >> $GITHUB_STEP_SUMMARY
          echo "- 💾 内存占用减少 25-30%" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 仅包含运行时必需组件" >> $GITHUB_STEP_SUMMARY
          echo "- 🎯 专为生产环境优化" >> $GITHUB_STEP_SUMMARY
